<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="
      http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd
      http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
      http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.0.xsd
      http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.0.xsd">

    <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource"
		destroy-method="close">
		<!-- 指定连接数据库的驱动 -->
		<property name="driverClass" value="${jdbc.driver}" />
		<!-- 指定连接数据库的URL -->
		<property name="jdbcUrl" value="${jdbc.jdbcUrl}" />
		<!-- 指定连接数据库的用户名 -->
		<property name="user" value="${jdbc.user}" />
		<!-- 指定连接数据库的密码 -->
		<property name="password" value="${jdbc.password}" />
		<!-- 指定连接数据库连接池的最大连接数 -->
		<property name="maxPoolSize" value="${jdbc.maxPoolSize}" />
		<!-- 指定连接数据库连接池的最小连接数 -->
		<property name="minPoolSize" value="${jdbc.minPoolSize}" />
		<!-- 指定连接数据库连接池的初始化连接数 -->
		<property name="initialPoolSize" value="${jdbc.initialPoolSize}" />
		<!-- 指定连接数据库连接池的连接的最大空闲时间 -->
		<property name="maxIdleTime" value="${jdbc.maxIdleTime}" />
		<!-- 当连接池连接耗尽时，客户端调用getConnection()后等待获取新连接的时间，超时后将抛出SQLException，如设为0则无限期等待。单位毫秒。默认: 
			0 -->
		<property name="checkoutTimeout" value="${jdbc.checkoutTimeout}" />
		<!--定义在从数据库获取新连接失败后重复尝试的次数。默认值: 30 小于等于0表示无限次 -->
		<property name="acquireRetryAttempts" value="${jdbc.acquireRetryAttempts}" />
		<!--每60秒检查所有连接池中的空闲连接。默认值: 0，不检查 -->
		<property name="idleConnectionTestPeriod" value="${jdbc.idleConnectionTestPeriod}" />
		<!--c3p0全局的PreparedStatements缓存的大小。如果maxStatements与maxStatementsPerConnection均为0，则缓存不生效，只要有一个不为0，则语句的缓存就能生效。默认值: 
			0 -->
		<property name="maxStatements" value="${jdbc.maxStatements}" />

		<!-- <property name="breakAfterAcquireFailure" value="false"></property> 
			<property name="testConnectionOnCheckout" value="true"></property> <property 
			name="testConnectionOnCheckin" value="true"></property> -->
	</bean>

	<bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">  
	        <property name="dataSource" ref="dataSource"/>  
	</bean>  

    <!-- mybatis文件配置，扫描所有mapper文件 -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		 <property name="dataSource" ref="dataSource"/>
        <property name="mapperLocations">
            <list>
                <value>classpath*:mybatis/com/bw30/zsch/tribe/touch/**/*Mapper.xml</value>
                <value>classpath*:mybatis/com/bw30/zsch/tribe/touch/**/*MapperEx.xml</value>
            </list>
        </property>
	</bean>

    <bean id="sysTransactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
    </bean>

    <bean id="sysTransactionTemplate" class="org.springframework.transaction.support.TransactionTemplate">
        <property name="transactionManager" ref="sysTransactionManager"/>
    </bean>

    <!-- spring与mybatis整合配置，扫描所有dao -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="sqlSessionTemplateBeanName" value="sysSqlSessionTemplate"/>
        <property name="basePackage" value="com.bw30.zsch.tribe.touch"/>
        <property name="annotationClass" value="com.bw30.zsch.tribe.touch.annotation.TribeTouchMyBatisRepository"></property>
    </bean>

    <!-- SqlSessionTemplate是我们代码中使用的SQL模板对象，用来操作数据库 -->
    <bean id="sysSqlSessionTemplate" class="org.mybatis.spring.SqlSessionTemplate">
        <constructor-arg ref="sqlSessionFactory"/>
    </bean>

    <!-- 基于注解的事务配置-->
    <tx:annotation-driven transaction-manager="sysTransactionManager" proxy-target-class="true"/>

</beans>